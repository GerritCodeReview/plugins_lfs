{
  "comments": [
    {
      "key": {
        "uuid": "98c035e4_8b332aa1",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/lfs/locks/LfsLocksHandler.java",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-05-17T12:09:00Z",
      "side": 1,
      "message": "Optional:\n\nCould we use Project.NameKey here?",
      "range": {
        "startLine": 72,
        "startChar": 32,
        "endLine": 72,
        "endChar": 38
      },
      "revId": "604a28fa002325b8a7cb4b539d8db6b21c29150f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be1092a3_0f114bde",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/lfs/locks/LfsLocksHandler.java",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2017-05-17T13:41:00Z",
      "side": 1,
      "message": "sure",
      "parentUuid": "98c035e4_8b332aa1",
      "range": {
        "startLine": 72,
        "startChar": 32,
        "endLine": 72,
        "endChar": 38
      },
      "revId": "604a28fa002325b8a7cb4b539d8db6b21c29150f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8604de19_90a56f97",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/lfs/locks/LfsLocksHandler.java",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-05-17T12:09:00Z",
      "side": 1,
      "message": "Can we rely on the presence of an element in a guava cache?\n\nGuava cache will remove LRU elements when the cache approaches its full capacity. Even if a lock was put into the cache it may not exist when this code checks for it.",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 108,
        "endChar": 5
      },
      "revId": "604a28fa002325b8a7cb4b539d8db6b21c29150f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "284eac7d_7ce9e32a",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/lfs/locks/LfsLocksHandler.java",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2017-05-17T13:41:00Z",
      "side": 1,
      "message": "When there is parameterless newBuilder() used for cache creation there is no automatic eviction of any type enforced - do you thing that there should be? I have decided to use cache of caches so that:\n1. entries on first level are created only when needed (LFS is enabled for project)\n2. caches are per project - they are smaller in size and I can imagine that they will not grow indefinitely as locking is manual operation called by user...\n\nwe can revisit that in the follow up change if you have some scenario in mind ;)",
      "parentUuid": "8604de19_90a56f97",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 108,
        "endChar": 5
      },
      "revId": "604a28fa002325b8a7cb4b539d8db6b21c29150f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff115195_0dbabd7d",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/lfs/locks/LfsLocksHandler.java",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2017-05-18T01:03:55Z",
      "side": 1,
      "message": "Add this design detail in the commit message?",
      "parentUuid": "284eac7d_7ce9e32a",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 108,
        "endChar": 5
      },
      "revId": "604a28fa002325b8a7cb4b539d8db6b21c29150f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10eee77e_a0838161",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/lfs/locks/LfsLocksHandler.java",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2017-05-18T06:21:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff115195_0dbabd7d",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 108,
        "endChar": 5
      },
      "revId": "604a28fa002325b8a7cb4b539d8db6b21c29150f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1516bbc_18b5cbc8",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/lfs/locks/LfsLocksHandler.java",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-05-18T07:42:05Z",
      "side": 1,
      "message": "\u003e When there is parameterless newBuilder() used for cache creation\n \u003e there is no automatic eviction of any type enforced - do you thing\n \u003e that there should be?\n\nI didn\u0027t know that. My assumption was that there is always some\ndefault max size so that cache cannot grow indefinitely.\n\nBtw, since with the current design there is no automatic eviction\nthe cache could grow indefinitely. Right? Is this a concern?",
      "parentUuid": "284eac7d_7ce9e32a",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 108,
        "endChar": 5
      },
      "revId": "604a28fa002325b8a7cb4b539d8db6b21c29150f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "286385b6_4b723e7b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/lfs/locks/LfsLocksHandler.java",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2017-05-18T08:30:47Z",
      "side": 1,
      "message": "I am not worried about project locks as they will be released eventually when user releases it so in theory they can grow infinitely (to the number of LFS files in repo ;)) but in practice that shouldn\u0027t happen.\n\nI am thinking about adding some project admin level functionality to clear all locks from project with couple of options e.g all locks, all locks older than XX days, etc - what do you think?\n\nSmall concern could be that inactive project locks occupies memory - I have proposed patch for it: https://gerrit-review.googlesource.com/107351",
      "parentUuid": "c1516bbc_18b5cbc8",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 108,
        "endChar": 5
      },
      "revId": "604a28fa002325b8a7cb4b539d8db6b21c29150f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}